// Test des nouvelles fonctionnalit√©s de ventes avec familles de produits
import { connectDatabase, closeDatabase } from './database.js';
import { getClientSales } from './tools/sales.js';

async function testEnhancedSalesFeatures() {
  console.log('üß™ Test du tool ebp_get_client_sales am√©lior√©...\n');
  
  try {
    await connectDatabase();
    
    const testCustomerId = 'CAEROSPATIALE';
    console.log(`üéØ Test avec le client: ${testCustomerId}\n`);
    
    // 1. Test p√©riode ann√©e courante avec familles
    console.log('üìä Test 1: CA ann√©e courante avec familles de produits');
    console.log('=====================================================');
    const yearSales = await getClientSales({
      customerId: testCustomerId,
      period: 'year',
      includeProductFamilies: true
    });
    
    console.log(`‚Ä¢ Client: ${yearSales.customerName}`);
    console.log(`‚Ä¢ P√©riode: ${yearSales.period}`);
    console.log(`‚Ä¢ CA Total: ${yearSales.totalRevenue?.toFixed(2) || 0}‚Ç¨`);
    console.log(`‚Ä¢ Commandes: ${yearSales.totalOrders}`);
    console.log(`‚Ä¢ Panier moyen: ${yearSales.averageOrderValue?.toFixed(2) || 0}‚Ç¨`);
    
    if (yearSales.productFamilies && yearSales.productFamilies.length > 0) {
      console.log('\nTop 5 familles de produits:');
      yearSales.productFamilies.slice(0, 5).forEach((family, i) => {
        console.log(`  ${i + 1}. ${family.name}`);
        console.log(`     CA: ${family.revenue?.toFixed(2)}‚Ç¨ (${family.percentage}%)`);
        console.log(`     ${family.itemCount} articles | Qt√©: ${family.quantity}`);
        
        if (family.subFamilies && family.subFamilies.length > 0) {
          console.log(`     Sous-familles principales:`);
          family.subFamilies.slice(0, 3).forEach(subFamily => {
            console.log(`       ‚Üí ${subFamily.name}: ${subFamily.revenue?.toFixed(0)}‚Ç¨ (${subFamily.percentage}%)`);
          });
        }
        console.log('');
      });
    }
    
    // 2. Test p√©riode trimestre avec √©volution
    console.log('\nüìà Test 2: CA trimestre courant avec √©volution mensuelle');
    console.log('========================================================');
    const quarterSales = await getClientSales({
      customerId: testCustomerId,
      period: 'quarter',
      includeMonthlyTrend: true
    });
    
    console.log(`‚Ä¢ P√©riode: ${quarterSales.period}`);
    console.log(`‚Ä¢ CA: ${quarterSales.totalRevenue?.toFixed(2)}‚Ç¨`);
    console.log(`‚Ä¢ Commandes: ${quarterSales.totalOrders}`);
    
    if (quarterSales.monthlyTrend && quarterSales.monthlyTrend.length > 0) {
      console.log('\n√âvolution mensuelle:');
      quarterSales.monthlyTrend.forEach(month => {
        const monthLabel = new Date(month.month + '-01').toLocaleDateString('fr-FR', { 
          year: 'numeric', 
          month: 'long' 
        });
        console.log(`  ‚Ä¢ ${monthLabel}: ${month.revenue?.toFixed(2)}‚Ç¨ (${month.orders} commandes)`);
      });
    }
    
    // 3. Test p√©riode personnalis√©e (6 derniers mois)
    console.log('\nüìÖ Test 3: P√©riode personnalis√©e (6 derniers mois)');
    console.log('==================================================');
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    
    const customSales = await getClientSales({
      customerId: testCustomerId,
      period: 'custom',
      startDate: sixMonthsAgo.toISOString().split('T')[0],
      endDate: new Date().toISOString().split('T')[0],
      includeProductFamilies: true,
      includeMonthlyTrend: true
    });
    
    console.log(`‚Ä¢ P√©riode: ${customSales.period}`);
    console.log(`‚Ä¢ CA: ${customSales.totalRevenue?.toFixed(2)}‚Ç¨`);
    console.log(`‚Ä¢ Commandes: ${customSales.totalOrders}`);
    console.log(`‚Ä¢ Panier moyen: ${customSales.averageOrderValue?.toFixed(2)}‚Ç¨`);
    
    if (customSales.productFamilies) {
      console.log(`\nTop 3 familles sur la p√©riode:`);
      customSales.productFamilies.slice(0, 3).forEach((family, i) => {
        console.log(`  ${i + 1}. ${family.name}: ${family.revenue?.toFixed(0)}‚Ç¨ (${family.percentage}%)`);
      });
    }
    
    // 4. Test p√©riodes pr√©d√©finies rapides
    console.log('\n‚ö° Test 4: P√©riodes pr√©d√©finies rapides');
    console.log('======================================');
    
    const periods = ['week', 'month'] as const;
    for (const period of periods) {
      const quickTest = await getClientSales({
        customerId: testCustomerId,
        period
      });
      
      console.log(`‚Ä¢ ${quickTest.period}: ${quickTest.totalRevenue?.toFixed(0)}‚Ç¨ (${quickTest.totalOrders} commandes)`);
    }
    
    console.log('\n‚úÖ Tous les tests r√©ussis !');
    console.log('\nüéØ Tool ebp_get_client_sales pr√™t pour int√©gration MCP');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await closeDatabase();
  }
}

testEnhancedSalesFeatures();